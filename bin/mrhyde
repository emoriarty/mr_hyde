#!/usr/bin/env ruby

STDOUT.sync = true

$:.unshift File.join(File.dirname(__FILE__), *%w{ .. lib })

require 'io/console'
require 'mercenary'
require 'mr_hyde'
require 'mr_hyde/commands/remove'

Mercenary.program(:mrhyde) do |p|
  p.version MrHyde::VERSION
  p.description "Mr. Hyde is a tool intended to manage as many blog as you want powered by Jekyll."
  p.syntax "mrhyde <subcommand>"

  p.command(:new) do |c|
    c.syntax "new <subcommand>"
    c.description "Creates a new Mr. Hyde site scaffold in path"
    c.option "force", "--force", "Force creation even if PATH already exists"

    c.command(:scaffold) do |scf|
      scf.syntax "scaffold PATH"
      scf.description "Creates a new Mr. Hyde site scaffold in path"
      scf.option "force", "--force", "Force creation even if PATH already exists"

      scf.action do |args, options|
        MrHyde::Commands::New.process({ :args => args }, options)
      end
    end

    c.command(:site) do |site|
      site.syntax "site name [name .. n]"
      site.description "Creates a new Jekyll site or sites"

      site.option "force", "--force", "Force creation even if PATH already exists"
      site.option "blank", "--blank", "Creates scaffolding but with empty files"

      site.action do |args, options|
        MrHyde::Commands::New.process({ :type => :site, :args => args }, options)
      end
    end

    c.action do |args, options|
      if args.empty?
        puts c
      else
        unless c.has_command?(args.first)
          MrHyde.logger.abort_with "Invalid command. Use --help for more information"
        end
      end
    end
  end
  
  p.command(:remove) do |rm|
    rm.syntax "remove name[, name, name, ...] "
    rm.description "Remove a Jekyll site when on Mr.Hyde root folder."

    rm.option "force", "--force", "Don't ask for remove blog"

    rm.action do |args, options|
      #if options['force']
        MrHyde::Commands::Remove.process(args, options)
=begin else
        args_clone = args.clone
        puts args_clone
        args_clone.each do |sm|
          print "Are you sure you want to remove #{sm} (y|n):"
          value = gets.chomp
          puts "value: {value}\n"
          MrHyde::Commands::Remove.process sm, opts if value == 'y'
        end
=end
    end

  end

  p.command(:build) do |c|
    c.syntax "build name[name, name, ...] "
    c.description "Build the named blog or blogs, by default if no name is indicated then all blog will be built"

    c.action do |args, options|
      MrHyde::Commands::Build.process args
    end
  end

  p.action do |args, options|
    if args.empty?
      puts p
    else
      unless p.has_command?(args.first)
        MrHyde.logger.abort_with "Invalid command. Use --help for more information"
      end
    end
  end
end
