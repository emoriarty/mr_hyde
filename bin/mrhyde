#!/usr/bin/env ruby

STDOUT.sync = true

$:.unshift File.join(File.dirname(__FILE__), *%w{ .. lib })

require 'io/console'
require 'mercenary'
require 'mr_hyde'
require 'mr_hyde/commands/remove'

Mercenary.program(:mrhyde) do |p|
  p.version MrHyde::VERSION
  p.description "Mr. Hyde is a tool intended to manage as many blog as you want powered by Jekyll."
  p.syntax "mrhyde <subcommand>"

  p.command(:new) do |c|
    c.syntax "new <subcommand>"
    c.description "Creates a new Mr. Hyde site scaffold in path"
    c.option "force", "--force", "Force creation even if PATH already exists"

    c.action do |args, options|
      MrHyde::Commands::New.process(args, options)
    end
  end

  p.command(:site) do |site|
    site.syntax "site <subcommand>"
    site.description "Manage all sites from command line"

    site.command(:new) do |snew|
      snew.syntax "new name[ name ... n]"
      snew.description "Creates a new Jekyll site or sites"

      snew.option "force", "--force", "Force creation even if PATH already exists"
      snew.option "blank", "--blank", "Creates scaffolding but with empty files"

      snew.action do |args, options|
        MrHyde::Commands::New.process({ :type => :site, :args => args }, options)
      end
    end

    site.command(:remove) do |srm|
      srm.syntax "remove name[ name ... n] "
      srm.description "Remove a Jekyll site when on Mr.Hyde root folder. By default it removes just the built site."

      srm.alias(:rm)

      srm.option "force", "--force", "Don't ask for remove blog"
      srm.option "all", "--all", "Remove all built sites. This option works alone."
      srm.option "full", "--full", "Remove all built and draft site or sites. This option can be used with the rest of options."

      srm.action do |args, options|
        MrHyde::Commands::Remove.process(args, options)
      end
    end
    
    site.command(:build) do |sbuild|
      sbuild.syntax "build name[ name ... n] "
      sbuild.description "Build the named blog or blogs, by default if no name is indicated then all blog will be built"

      sbuild.option "all", "--all", "Build all blogs"

      sbuild.action do |args, options|
        MrHyde::Commands::Build.process args, options
      end
    end

  end 
  
  p.action do |args, options|
    if args.empty?
      puts p
    else
      unless p.has_command?(args.first)
        MrHyde.logger.abort_with "Invalid command. Use --help for more information"
      end
    end
  end
end
