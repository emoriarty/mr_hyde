#!/usr/bin/env ruby

STDOUT.sync = true

$:.unshift File.join(File.dirname(__FILE__), *%w{ .. lib })

require 'io/console'
require 'mercenary'
require 'mr_hyde'
require 'mr_hyde/commands/remove'
require 'mr_hyde/commands/serve'
require 'mr_hyde/commands/list'

# Helpers
def cmd_remove(command)
  command.syntax "remove name[ name ... n] "
  command.description "Remove a nested site within Mr.Hyde folder. By default it removes just the built site."

  command.alias(:rm)

  #srm.option "force", "--force", "Don't ask for remove blog"
  command.option "all", "--all", "Remove all built sites."
  command.option "full", "--full", "Remove all built and source site/s. This option can be used with the rest of options."

  command.action do |args, options|
    MrHyde::Commands::Remove.process(args, options)
  end
end

def cmd_build(command)
  command.option "all", "--all", "Builds main site and nested sites. Not applied when building a nested site."

  add_build_options(command)

  command.action do |args, options|
    options['main'] = true if args.length == 0
    MrHyde::Commands::Build.process args, options
  end
end

# Add common options to a command for building configuration
#
# c - the Jekyll::Command to add these options to
#
# Returns nothing
def add_build_options(c)
  c.option 'config',  '--config CONFIG_FILE[,CONFIG_FILE2,...]', Array, 'Custom configuration file'
  c.option 'quiet',   '-q', '--quiet', 'Silence output.'
  c.option 'verbose', '-V', '--verbose', 'Print verbose output.'
=begin
  c.option 'destination', '-d', '--destination DESTINATION', 'The current folder will be generated into DESTINATION'
  c.option 'source', '-s', '--source SOURCE', 'Custom source directory'
  c.option 'future',  '--future', 'Publishes posts with a future date'
  c.option 'limit_posts', '--limit_posts MAX_POSTS', Integer, 'Limits the number of posts to parse and publish'
  c.option 'watch',   '-w', '--[no-]watch', 'Watch for changes and rebuild'
  c.option 'force_polling', '--force_polling', 'Force watch to use polling'
  c.option 'lsi',     '--lsi', 'Use LSI for improved related posts'
  c.option 'show_drafts',  '-D', '--drafts', 'Render posts in the _drafts folder'
  c.option 'unpublished', '--unpublished', 'Render posts that were marked as unpublished'
  c.option 'verbose', '-V', '--verbose', 'Print verbose output.'
  c.option 'incremental', '-I', '--incremental', 'Enable incremental rebuild.'
=end
end

Mercenary.program(:mrhyde) do |p|
  p.version MrHyde::VERSION
  p.description "Mr. Hyde is a tool intended to manage as many blog as you want powered by Jekyll."
  p.syntax "mrhyde <subcommand>"

  p.command(:new) do |c|
    c.syntax "new [PATH]"
    c.description "Creates a new Mr. Hyde site scaffold in path or current path."
    c.option "force", "--force", "Force creation even if PATH already exists."
    c.option "blank", "--blank", "Creates scaffolding but with empty files."

    c.action do |args, options|
      MrHyde::Commands::New.process(args, options)
    end
  end

  p.command(:site) do |site|
    site.syntax "site <subcommand>"
    site.description "Manage all sites from command line"

    site.command(:new) do |snew|
      snew.syntax "new name[ name ... n]"
      snew.description "Creates a new Jekyll site or sites"

      snew.option "force", "--force", "Force creation even if PATH already exists"
      snew.option "blank", "--blank", "Creates scaffolding with empty files and no nested site"

      snew.action do |args, options|
        MrHyde::Commands::New.process({ :type => :site, :args => args }, options)
      end
    end

    site.command(:remove) do |srm|
      cmd_remove srm
    end
    
    site.command(:build) do |sbuild|
      sbuild.syntax "build name[ name ... n] "
      sbuild.description "Build the named site or sites. By default if no name is indicated then all sites will be build."

      cmd_build sbuild
    end
  end 

  p.command(:serve) do |serve|
    serve.syntax "serve [options]"
    serve.description "Serve your site locally"
    serve.alias :server

    serve.option 'detach', '-B', '--detach', 'Run the server in the background (detach)'
    serve.option 'port', '-P', '--port [PORT]', 'Port to listen on'
    serve.option 'host', '-H', '--host [HOST]', 'Host to bind to'
    serve.option 'baseurl', '-b', '--baseurl [URL]', 'Base URL'
    serve.option 'skip_initial_build', '--skip-initial-build', 'Skips the initial site build which occurs before the server is started.'

    serve.action do |args, options|
      options["serving"] = true
      options["watch"] = true unless options.key?("watch")
      MrHyde::Commands::Build.process(options['all'] = 'all') if options['build']
      MrHyde::Commands::Serve.process(options)
    end
  end

  
  p.command(:build) do |build|
    build.syntax "build [site name]"
    build.description "Build the main site"
    cmd_build build
  end
  
  p.command(:list) do |list|
    list.syntax "list"
    list.description "Shows a list of all sites within sources."

    list.option "built", "--built", "Shows a list of built sites."
    list.option "draft", "--drafts", "Shows a list of sites not built."

    list.action do |args, options|
      MrHyde::Commands::List.process options
    end
  end
    
  p.command(:remove) do |rm|
    cmd_remove rm
  end

  p.action do |args, options|
    if args.empty?
      puts p
    else
      unless p.has_command?(args.first)
        MrHyde.logger.abort_with "Invalid command. Use --help for more information"
      end
    end
  end
end
